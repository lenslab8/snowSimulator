import math

import numpy as np
import pylab as plt
from numpy import fft
import gold
import random

hex0 = 0xa5822141c362514af1cc9615604be1a726f7d455918b11fe3e2b340a8cde6a57c5f5c548e8c5bee0
hex1 = 0xbada18590b6b9491b0f4e2d486657ff883feda11e6960bf2142ab85a246f65b7d7064baa949fad24
hex2 = 0xf3f559d94ab4027f598ce81139bbff868174b996f8df2946e88c9ab56c7ea0e6b5ba84c278f8f825
hex3 = 0xdfa4b8397f97c3dbd0353df5ad0e405060072973a3988030892fade13c04666abd693d8e1d1dd0a3
hex4 = 0xe764fc5b69f6fa453d7f039d5e01c7a1e0861ebf15537f4c4c3cbdfebe2062f725ee9763c305629c
hex5 = 0xe0aa675bcae57f9c8bd34f6a06a652491acca0ac55a321ed2f17af90189a3bc6e970e36ff538ce38
hex6 = 0xc60e044aada39647f3f2c1511b60341cb4313dfd42773fb9f375bcf65a9f23da5ca6d1825d1c393f
hex7 = 0xaaf4f2e3e0fcdfa06bc85826898c7f6e52f2e2b833b94a1c051140013c8574e493dc2fc983a45f95
hex8 = 0xc830dd4f4d9d98645146ad217be5e5ccde1057231bda49fbba29ef12ced1657b81ec7b5a4e0d38f2
hexI = 0x8d692d3fe132e32854bfb76430289bf0e18a4ef715741a6b49935d388258bd75680b4413aedf954a

# fs = 6000000
fs = 1131305000
fc1 = 549800000
fc2 = 550000000
fc3 = 550200000
# fc3 = 549600000
fftSize = 2240
# fftSize = 64

sumSpreadData = 0
printCounter = -1
packetErrorCount = 0
totalErrorBitCount = 0

accuracy = []
bitError = []

numberOfCarriersUtil = 1
isNoiseAdded = False

def calculateNoiseBasedOnSNR(SNRdb, size):
    signalPower = 1
    sigma2 = signalPower * 10 ** (-SNRdb / 10)  # calculate noise power based on signal power and SNR

    # noise = np.sqrt(sigma2 / 2) * (np.random.randn(2240))
    noise = np.sqrt(sigma2 / 2) * (np.random.randn(size))
    # noise = np.sqrt(sigma2 / 2) * (np.random.randn(320))
    return noise


# noise = np.random.normal(0, 0.001, 2240)
# noise = np.random.normal(0, 0.01, 2240)
# snr = 5, 10, 15, 20, 25
#noise = calculateNoiseBasedOnSNR(10, 2240)
#noise = calculateNoiseBasedOnSNR(25, 2240)
noise = calculateNoiseBasedOnSNR(6, 2240)


# noise = [-0.07461589555240696, 0.05380980046497607, -0.09475782763974247, 0.0025193595046202337, 0.01867554640393974, 0.025489810534460478, 0.05851376124971678, 0.0256131921852229, -0.05066999793387969, 0.09501214966610555, 0.002214121438774242, 0.05679757217123488, 0.23842809121313246, -0.050566796742654935, 0.08319058006030328, 0.10955603253547186, -0.04503442412171677, -0.13894080573301934, 0.025497494430702646, 0.10757208649881277, -0.12454496129815462, 0.000423703656716478, 0.18793958441284964, 0.2297348315710207, 0.07079977504413881, 0.02148294937413763, -0.07652960679206033, 0.042763502244438804, 0.006998640069577993, -0.00026117607033449025, 0.05984981553309208, -0.06676338737672632, 0.2008617563490449, -0.02681789062640091, -0.010945722870263878, 0.056986406611731835, -0.16601611402391794, 0.2264192559625467, 0.10022119776061122, -0.23753608875334611, -0.10052342520946696, 0.07622901948117347, -0.11748487081689572, 0.0380527286097989, 0.10185698888727857, 0.07824711118800451, -0.13823350585039254, 0.025748132754785907, -0.04663194503967352, 0.01762064513344842, 0.027207444326455967, 0.03944509805923247, -0.08754962058705405, -0.009011870265135273, 0.08694259794592749, -0.010347093924197689, 0.22039229084352346, 0.20372505298521, 0.04271996150035954, -0.1478798109461202, -0.015358657505942452, 0.11285521832252271, -0.00200886680281914, -0.05537019047455802, -0.03438180897862347, -0.17917002728497586, 0.10654794553665514, 0.04681488241950772, 0.025578816037991045, 0.05029709142340144, 0.03647042161050528, -0.04504434921997946, 0.015129140529782592, -0.043851086390295925, 0.09879888590255007, 0.030986698704308785, 0.013723386366091592, -0.004514331619363864, -0.02274877301539131, 0.025415861263884995, -0.07351917914881591, -0.23209143394819776, 0.0600915098925661, -0.04804852933740478, -0.03861250366958142, 0.1128283336802642, -0.19571171832437914, 0.12940923763355275, -0.08510529365266399, 0.08168511114236236, 0.14021813356651577, 0.05580579360802029, 0.06614490239052705, -0.05137032773161237, -0.11265487544427438, 0.09944820820618933, 0.01920167089791737, 0.06356182816348273, 0.16344878057302487, 0.15154325440630356, 0.20091618851552662, -0.033577983626798556, 0.03054831448663168, 0.07002818654176172, -0.02783799289861268, -0.12819452621865463, -0.023048631119795063, 0.1034971568303274, 0.05494539727033243, 0.08819027384177086, 0.03869832977693687, -0.10489780165221335, -0.1221326949680969, -0.078734960483026, 0.036540615943004756, -0.0572266328686235, 0.02109040437329774, 0.10900519321144815, -0.0761329350768869, -0.1224792230001194, -0.011836826257917682, 0.17540193459920225, -0.12021597146927754, 0.0004826934391499398, -0.031462835250482095, 0.07454113780833709, -0.01183152904089197, 0.23751853422776426, 0.07195184444484308, -0.014877728761307666, -0.013422040100397284, -0.14524411728151895, 0.08339057957697696, -0.150491034596016, -0.00223840970289926, -0.055748107504023106, 0.06713180203957915, -0.0092509565313549, -0.1211332576466288, 0.010595305703707123, -0.16362110597214197, -0.04587435075785887, -0.10580945775667255, -0.11645776145791997, -0.0009788162947365067, 0.03436850706780647, 0.17941605088734003, -0.06894780165508622, 0.05101654927610308, -0.042256573262861336, -0.1940562405098266, -0.0891158668914626, -0.08333175782650276, 0.0007731138406131199, -0.07067876364392861, -0.005114402891966045, -0.08095523014809029, 0.06079947788710813, -0.00472992983888218, 0.10251867098899087, 0.03794879075591425, 0.06062194632602963, -0.13449805333359663, -0.14696869635728171, -0.15552225514733853, 0.1426333237466263, -0.02806820850242064, 0.015473907906773138, -0.07742767994156681, 0.10369313885127936, 0.00889815567758055, 0.1235560139311332, -0.19803551328449953, 0.009921655281935173, 0.053149964263110784, -0.037515123495124654, 0.11507393141133115, 0.028459942063403538, 0.05797949789274087, 0.09689443606946574, 0.055021016173778095, -0.07755703093692815, 0.1569556444650848, 0.0360147891499478, 0.19022239536650717, -0.057334305960957524, -0.016912359901505167, 0.07387067051196956, 0.06811738838438848, -0.12978818871002626, -0.09711431263075128, 0.08861916634678825, 0.14985515224243126, 0.04557661712650751, 0.002257196574357877, 0.07528619643218941, -0.08499102296900718, 0.06760924832458125, 0.05202346339063355, -0.06645362080546041, 0.08057538541275328, -0.049649418154331174, 0.07169209293398336, 0.010039238903504354, -0.005634749037378345, 0.20318303522094583, -0.07989260887533353, 0.1620592619842758, -0.015322713225682903, 0.06656084880754819, 0.034641022145874105, -0.12407640566622223, -0.0013936104283844895, 0.06942726018378853, 0.023803903538958622, 0.04843328247207106, -0.11916273391532478, 0.09701917923737861, -0.013793918556873383, -0.03516418033171315, -0.039592433405680555, -0.026137480242373303, -0.04192458457430716, -0.019258947111999217, -0.08940037874512109, 0.0747322808171504, -0.06972904382451871, 0.1419126234972867, 0.10685182549228125, 0.0514305460935624, 0.02476925530383519, 0.1393610048638304, 0.1033202707537506, 0.08311844803088028, -0.08787125741947083, -0.07256745237807054, 0.19182442377559086, 0.03327623358487854, 0.04004706211354342, -0.07356141363515348, -0.047063870336246844, -0.19473746900759137, 0.1022804082498354, -0.01647205258974959, -0.012621036761622656, 0.15715272020416496, 0.2195512043039694, 0.13570578749885423, -0.13523885737617963, -0.01950404446576397, -0.004246259276787786, -0.11633749511032965, 0.18892447580433233, -0.17426420471972415, -0.13919905398350643, 0.06697110699792179, -0.07609548298576396, 0.1235263804569813, -0.12231040296492784, 0.08801340975860909, 0.03128545985649367, 0.020751061807284147, 0.05270899625741313, 0.15711146461407835, -0.1030419856332791, 0.14620224921268227, 0.032759920272892595, 0.03250138372114688, 0.10137654009064745, -0.20358041486321954, 0.0036839497207107677, 0.20433274715241923, 0.05152752863644775, 0.0366192529010231, -0.08385447609961856, -0.062062223560343105, -0.06039825124368843, 0.012014358921087548, 0.1883282186940451, -0.0832872173825012, 0.14286667256944002, 0.004005735579595036, 0.06326531888998664, 0.13012617140336163, 0.027208448211171084, -0.12063381359148449, -0.09841540549503945, 0.04983894100795709, -0.0786860354478845, -0.048283073436914264, 0.030393920510687157, 0.0599227458449875, -0.07338372929931661, 0.010327538630493956, -0.12474311652529241, -0.007409222119941477, -0.07659598716307281, 0.09967552570662608, 0.11558769552149516, -0.0984797539866755, -0.06483002894900833, 0.059725874003125234, 0.11804053327578526, -0.08110385849205323, 0.0340951700159715, -0.014968025915076386, -0.08624654022734907, -0.060246199112699274, 0.0577741605716718, -0.03841914316419749, 0.03390126606425162, 0.0676947264629252, -0.11320066184184036, -0.06152231072679626, 0.001606357952279039, 0.07587954047976862, 0.1401303088277036, 0.05132016077937364, 0.030011366001732837, 0.06408178532104919, 0.019604331219550054, 0.10367858923160689, -0.07657347067049108, 0.04076505377233583, 0.1372579165351849, -0.09243571732377934, -0.12420753599353176, -0.1128202214159092, 0.12232104509079063, 0.04316352692265324, -0.08589103887981918, 0.08075067498491331, 0.03590146322489605, 0.1687438057466007, -0.06341451498464709, 0.07871281795648548, 0.06535123972866168, -0.09434816970980026, -0.08014482734373668, 0.18996965247715547, -0.016195692270551107, 0.056682993412585515, -0.1365211062749245, 0.07032153451212257, 0.012853494355102139, 0.277868901623816, 0.18421515357098076, -0.07944099624437273, 0.036010678007052155, 0.039905993078368215, -0.19710966056452786, -0.03364360128939893, -0.07965681587620688, -0.03520135788749002, 0.10797061528610603, 0.10452587680730907, -0.21095159611943592, -0.024093155132496862, 0.012570814902285227, 0.011835170597307305, 0.09707144264165456, -0.12178902153551496, 0.0007905916747833431, -0.05054639105405589, -0.06912335004906664, 0.03192360188529241, -0.034242222595917866, 0.009196707812146612, -0.13909941061005446, 0.17267828334618035, -0.16320805978051006, -0.050356473175661845, -0.07804877869568617, -0.08641394451322007, -0.05521718036870742, -0.08375115178250908, -0.0980315323471657, -0.00377932970794911, -0.19215451920127177, 0.0312044754574484, -0.00950284244188857, 0.04992695009614952, 0.13192233191100297, 0.06290513847041096, -0.0002576916008300094, -0.09341572900680918, -0.1746750614817371, -0.05177110805946296, -0.024915349644280133, 0.051007822245946355, 0.0033780377028884315, 0.05822877416199369, -0.07011732854265217, 0.058853963512481025, 0.16286463019125752, 0.1739801387194425, -0.13454214348944746, 0.12851725011791873, 0.04919968819554449, -0.18353422690296278, 0.1211927047569216, -0.014359193637218654, -0.1640503225742958, -0.1208163908610299, 0.09296593565712447, 0.15994571921859524, 0.16435398648120975, -0.23406678492319802, -0.0811194561974782, -0.004803792386467635, 0.06108061903410076, 0.10870334154765736, 0.014645846732560447, 0.06458316079208949, -0.01019200813153471, 0.0771103562390103, 0.06979119551773301, 0.11842879146076604, 0.05226383970286461, -0.09457734978522936, 0.0870159816044533, 0.12147445351107927, -0.13237118652775692, 0.02262168172433146, -0.10396915121456002, -0.08639333778332514, 0.1429204684557339, 0.00101680301057243, -0.08130663503084261, 0.0455027555292866, -0.13770118580328894, 0.016330478407835494, 0.1707216037293786, 0.1521570210324807, -0.03671031124290348, 0.08973388595910048, 0.039797845272235, 0.20496819155320978, -0.04730705084153151, -0.04488619714398957, -0.03558595810321571, -0.010790272037233454, 0.007535130278429361, 0.024561482148206592, 0.11574606067235119, -0.03779380034551795, 0.014975981822966104, 0.028816144251791676, -0.2097736126304917, 0.15389142990180335, -0.044305249068576316, -0.1948108612635573, 0.01958055567709359, 0.048006133971131286, -0.07032385287775991, -0.26491776791745586, -0.006366257985250658, -0.08904006184600827, -0.10553371166254318, -0.11439805464002523, 0.08895353576601286, -0.0077372130030044775, -0.060398221999498715, -0.01854492350306816, -0.07497996600793962, 0.184436363595714, 0.041260537120865394, 0.05955587954078298, 0.12762117311583307, -0.08423929063393641, 0.13236702924482663, 0.07803241461845341, 0.06609290383569168, -0.02659012338090861, -0.050834070880507704, -0.13500425873763253, 0.1127253874515895, -0.11780396310082995, -0.043433697734917905, -0.10957168663326156, 0.137670493647609, 0.15416708633836723, 0.06170337754357108, 0.13251248357806056, 0.11846941883645144, -0.1393730981000689, 0.20496752024423098, 0.09712321547920835, -0.1165442894381294, 0.012536409357742244, -0.2029041515651096, -0.1293492825187782, 0.07276745796935022, 0.15921124996662595, -0.05452550825435887, 0.05128600343373633, -0.15021235478966663, 0.025101405823055117, 0.12296282214223636, 0.008257556242029788, -0.02214784666063117, -0.05128816552329418, 0.09377658217445749, -0.004898678792929789, 0.028405359226158434, 0.09882109864178724, -0.03585948512073556, -0.0038979802655725454, -0.05655109660492857, -0.034001888468915754, -0.010682979568959916, -0.022230975039651, -0.05114587327633857, -0.058804578873142936, -0.08344644099780527, 0.009400540574877, 0.024747659300434408, -0.004269905681498006, -0.07771109008017756, 0.09718250061374945, 0.12629454839459783, -0.031118397601555117, 0.11996145901720019, -0.16241276776704194, 0.0757608129978722, -0.22055061589342345, 0.05791731383364712, -0.10967444876315474, 0.0633325293292806, -0.02736838461024213, 0.16436851353091822, 0.028149817034086325, 0.04235997914071361, 0.06241265260895006, 0.11372964981468166, 0.033148118060982966, -0.04453847008648433, -0.029297366404943695, -0.12380615922052987, -0.14086437811917496, -0.018738022495441174, 0.07182108580752095, 0.07349876421179609, -0.09568318132139847, 0.09475861198902179, -0.041313220144148795, 0.2286347338353718, -0.05924240572761309, 0.0026938227813504212, -0.019436938343747028, 0.08242951335268452, -0.09923272878978696, 0.11431519483947872, 0.212479963820537, -0.14643867864845417, -0.07465431541894077, 0.06766974817083747, 0.0556647690649659, -0.0750279206877319, -0.006181052527287884, -0.044461954851978736, -0.17005819444083498, 0.03666688578264942, 0.01742345479113394, 0.2441010085340427, 0.12093157630752796, -0.16461351630932483, 0.006510463205347549, 0.05014037062172018, 0.1710320418196436, 0.006383466266847844, -0.1746040249379374, -0.052044812146577524, 0.012296038891620087, -0.0926736035916861, -0.0705923873275263, -0.08512258353846877, -0.043597292933523275, -0.10809003971849236, -0.11719998122817454, -0.029324358424429167, -0.0465121071157267, 0.019226714482040427, -0.030218498538776662, 0.09662761369074459, -0.107963024969879, 0.03392969793472931, -0.14995108181057204, -0.14251609119654735, 0.2221374362607588, -0.06399688634775118, -0.1626599747823153, -0.1344021748879823, -0.12321029704098707, 0.08192134121165455, 0.05205259328324098, 0.08793215366115192, 0.022111515809288492, -0.10926831660416894, 0.006433706533622784, -0.07730222895092084, 0.036918728672310004, 0.023017406774597626, 0.08266652898686766, -0.14777941942235595, 0.07582698641368274, 0.0159736468145457, 0.04511479048313747, -0.1368786946793887, 0.05062182216070489, -0.043089724038012665, -0.06698733286395082, -0.04395505673369069, -0.2003471416797501, -0.09232346619127793, 0.0745159504618954, -0.01661745556889897, -0.18078397334267207, 0.12466015611878987, -0.0066738049317052635, 0.037283490932164695, -0.020225239321037414, 0.06977377164445964, 0.12865639915979774, 0.0894243387600222, 0.0924263777626758, -0.025329593297161907, 0.027921702888087846, -0.07157362465327145, -0.025831062983751454, -0.09485635449051173, -0.03690477276814524, -0.04095733336798233, -0.031209609833847962, 0.06999199617358401, -0.08836765681770678, -0.08568410497977855, 0.03671787000547267, 0.05284130258143539, -0.11827432024136947, -0.307618306869414, 0.08605630292757717, 0.002419029020407109, 0.08793227495339001, -0.0733084028113119, 0.2105335771985984, 0.17057452657349279, 0.010130442750897625, -0.11374993351719631, -0.08260625194388344, -0.023345238532532193, -0.022286266866368726, 0.0030491626571408775, 0.03152569588783404, 0.04728542553505567, -0.04360806340360229, 0.16287993663554656, -0.20216566752836426, 0.20422998487761276, 0.01205039260043182, -0.12494024221392275, 0.09644433713413661, 0.06768129393536908, -0.1795800767606038, 0.08704044777231393, 0.09607976552413584, -0.14202223189786592, -0.1334401241445053, -0.046389373006508354, -0.20848001608707728, -0.013618872382100725, -0.010122026640047598, 0.1946765872002097, 0.06993785853527294, 0.018410902480173554, 0.046932782100813454, 0.05827538123580575, -0.07150826432416085, 0.038575404708106206, 0.038554030708924415, -0.29496272858022693, 0.1709881968077504, -0.06868818638264826, 0.00834998548049345, -0.019665078758545763, 0.01450596804209958, 0.027606859414595203, -0.12919554799067945, -0.06554143222206248, -0.027268861645819587, 0.04496686868566338, 0.05397798109396155, -0.029363199412229358, -0.06200971434557831, 0.026331878552707435, 0.12916580982371675, -0.09347831445807955, -0.021695895987474158, 0.042367397843369035, -0.04646798238746194, -0.049865760940985104, -0.12026944054091851, -0.07446127162311578, -0.06535688406354558, 0.0013019337692845266, -0.10445106087242176, 0.02271706337382326, 0.14220450373903573, 0.12272855519528564, 0.1668214719830392, 0.04183134138556248, 0.12009757106129029, -0.19497932726359044, -0.04004195679063205, -0.06994161636578049, 0.051772151274798596, -0.10239204357183176, 0.1488659518986555, 0.07187247702514477, 0.26537827544324144, -0.20342681621015635, 0.14472151300237232, 0.05251455620673563, -0.05049930153997184, 0.025191093105362963, 0.060561546624340504, -0.05979803683475056, 0.19207039813211835, -0.09475096783932219, -0.012917702773560047, 0.0057794690181801394, -0.09832060212713123, -0.09666172761625498, -0.04242001345449554, -0.02630274718405109, 0.20291344116209908, -0.1307558370849783, 0.2959887242570327, 0.0951653735420962, 0.05779839566718956, 0.002898723586474683, 0.08478633637065591, -0.06708838637831416, -0.09708517224727174, -0.0757695813377292, 0.09197923702724109, 0.17418642526630945, -0.017460222563979617, 0.17309318035595003, 0.05093521278644904, 0.25721764980100903, 0.0793948011373934, 0.2240789588195392, -0.022641787066914068, -0.008932820366965378, 0.06142813894468479, -0.08675782633960248, 0.016533256342106867, -0.10337252556879672, -0.11146913498829758, 0.11311189416199988, 0.07109675577269081, -0.0029850012586636267, 0.16319863825820707, 0.024033598244022288, -0.0639726004157679, -0.09807509749968019, 0.11318781995755473, 0.1541102064117546, -0.07579868864685049, -0.05936367787515904, 0.0819894308279077, 0.1657685060994708, -0.14628777744754987, 0.15702560438814128, -0.20307292627790555, -0.10238803312586178, 0.038466649811972065, -0.10977734203051999, -0.016063674403932342, -0.1362207543972604, 0.09380247880792315, -0.1631330023779291, -0.1438541268908101, 0.005773588319345833, 0.09943733901063263, 0.12226664949556286, -0.0552282558027554, 0.0777798449765171, 0.17783652783938364, 0.07842620488913951, -0.1834313655534574, 0.1171225130151049, 0.16092337713173135, 0.10519208935704141, 0.1524752507484954, 0.07912226372439295, 0.26037484052903487, -0.013883691731297235, -0.10713906569949434, -0.005781264784878698, 0.08424623114059708, 0.05499970394707402, 0.03564104990500318, -0.1593742319468258, 0.03646195841334329, -0.07856085542890094, -0.11212174036488105, 0.05306020979408854, -0.046356737569192105, -0.24792196503469538, 0.07807620491590583, 0.0024115926374654183, 0.020275386109987945, 0.16313383049857832, 0.09052103378959378, -0.14613713541503656, 0.02753187891642028, -0.06955403315261421, -0.1476579786882853, 0.07729959426062308, -0.1788686093762827, 0.02100204275841265, -0.07841272875636704, 0.06405964613020357, -0.1524400549082098, -0.0951930347897683, 0.06577608832956693, 0.005597908987513458, -0.21364128946865268, 0.015542176960005413, 0.1270422273771369, -0.06848433954737715, 0.012945858406636824, -0.15876091267535763, -0.03431701079909167, -0.15120522530024166, -0.09603366597522356, -0.1280285467835848, 0.14227693525149807, -0.047247341606618934, -0.18675668643289411, -0.16834173201642072, 0.146576783908193, 0.18007972181570137, -0.015258372624121537, -0.0057225202769084485, -0.08149902220231445, -0.028677915241497015, 0.11530234749833582, -0.17758692846779228, 0.05133402518141155, 0.08052338520556887, -0.1253227347944311, -0.11142479786727862, 0.0230359852215491, 0.041741278291479805, 0.12673657903356397, 0.023327925902710097, 0.0352239895157325, 0.09866186224528584, -0.13631146309132391, -0.16259532443742583, 0.06447372307784481, -0.06360122468625137, -0.04242242490484487, -0.019477102595072363, -0.03653259560103705, -0.15591781552741804, 0.2080971412298867, -0.20906658799285635, 0.05577828073642417, -0.007579631561008833, 0.025989588509126235, -0.1602282039930878, -0.024663463814041633, -0.040552239179586946, 0.07973231397922197, 0.14608684814589595, -0.1503597013011308, 0.01884572982111188, 0.14332376668808633, -0.028172926767156065, -0.029258194478479844, 0.020876813852628448, -0.002970421324806918, 0.1276860354998477, 0.03606843995759578, -0.009387555870888895, 0.08085254944809654, 0.12695615533622331, 0.19004077131447764, -0.009875787698068874, 0.12506021734905254, -0.080959755699564, -0.03659121774448657, 0.10276489369262128, 0.09305118085687665, -0.006231558292537943, -0.1672573993873973, -0.02651611685223499, 0.024617228195562238, -0.02554685666513904, 0.0070541436634311665, -0.13072667950504552, 0.06807569076932445, -0.07192316876135309, -0.12342986277432966, -0.027097169985876003, -0.022869821819233038, 0.03386383876364055, -0.004846386749582831, -0.010142581272655531, -0.1273932486616295, 0.17382687500450583, -0.0037932526846628043, -0.05173053533133154, 0.13995164408980154, -0.07177354617302756, 0.0155118391692226, 0.015890524454693807, 0.06933983766538453, 0.017930028734340988, -0.0803586224872788, 0.05494579584770897, 0.09407907296156598, -0.07522883264150348, 0.028347589689167146, -0.036243098005470945, -0.05518106223252295, 0.08406658719801202, 0.0612881593267543, -0.010399826851153975, -0.13585403915111482, 0.014277743815360093, 0.05543376703173654, 0.018295267712261015, 0.1368717961563569, -0.06064381683300457, 0.20031724222052827, 0.006862369176504214, 0.005384524072286168, -0.07102677693364054, 0.031806583049603314, 0.04236355022607634, -0.09285237246020006, 0.008054930897573472, 0.204495901222064, -0.0679738727059881, 0.17443331853598584, 0.026216452391841585, -0.033790102617803956, 0.08727866105697826, -0.07031354576159533, -0.011546142448284898, 0.03938121842720384, -0.07638301055675961, 0.12214076838269257, 0.12894568670482112, -0.21124412326830938, -0.004586358002004367, 0.01085674480973598, -0.21804596753407934, -0.10319670197335405, -0.1463585851310266, -0.10944016046085557, 0.027794483517014374, 0.22226116786651684, 0.0291394026711379, 0.035347320912750564, 0.16647090168865628, 0.02710909484724442, -0.07995708937400603, 0.07230798832956768, -0.0406618488749707, -0.06540853807714357, -0.06902203184166418, -0.004972039014946715, 0.13983387906585212, 0.07061369213507177, -0.1856458178850543, 0.014832401703871501, -0.012747512998970116, -0.007219103895430703, -0.1015193005459806, -0.18389494452554073, -0.04528287842608584, 0.11711028211069725, 0.19749329997622456, -0.00035124561567816413, -0.2695992457430808, 0.045719603258449, -0.05495595312365619, -0.06256104229253807, 0.1441046351425808, -0.04900525831291331, -0.06781366979217102, -0.05563061295010318, -0.10287182937079767, 0.03435022112618334, 0.2033819572957358, 0.05851963031484867, -0.18456476923698872, 0.28467114547349975, -0.05176784274501417, 0.04642675669734041, -0.01969230333674583, 0.04272294012969741, 0.03272335828218648, 0.038845431760954896, 0.24213364451997543, -0.04092012448934759, 0.038973010816985114, -0.12111674247762652, 0.0034119314868008913, -0.1851633630651583, 0.13800281762438535, -0.026910320501811004, 0.07184917127417743, -0.11278651611038176, 0.019514732113910565, 0.13663729055401985, -0.06626781249823548, 0.05135277146360517, -0.06851594941789958, -0.06417932738512608, -0.10824567764394255, 0.01765654442856123, -0.06372529660126433, 0.11456811525664075, 0.07146353687901551, -0.17286953719915685, -0.09998289132731035, -0.04743774674763926, 0.01307621504178243, 0.09542585635786918, -0.019160275696064225, -0.10873530211967525, -0.0355241173553052, 0.23677369168321977, -0.07154110381822505, -0.058822223553539624, 0.08540126957735307, 0.11747796523586258, -0.04530592275162622, 0.12169095727641857, 0.018999039503095068, -0.10251870283479828, 0.12263567655658468, 0.07818241546196843, -0.25440488785300774, 0.02249320314469881, -0.022918528044940427, 0.006235853882689609, 0.015087354513560573, -0.09764796757407286, 0.18869325376444687, 0.07731449386645597, 0.02860188652657418, 0.10035293908295038, 0.17050347958215645, -0.012640628009919056, -0.06344379721019815, -0.20793934598356462, -0.057223400145255114, 0.03489098734401657, -0.07164295037556441, 0.07314426594447151, 0.032993817707493316, -0.06836279249738922, 0.008579779892254122, -0.1171649635370081, 0.0662242879732515, 0.012586812302901599, 0.055893572777779836, 0.00767790464914346, 0.05241741954207918, -0.06353727382299294, -0.11605330152697234, -0.20036071844605843, 0.006888977904851535, -0.014895567990150134, -0.0649410591288389, 0.007058675736395186, -0.04962002178487562, 0.01617661061679489, 0.0347290130964054, 0.033188233812889066, -0.016972923505383403, 0.12347689375519187, 0.15255202390370826, 0.1252507351088348, 0.015582827188241492, 0.11943281692555652, 0.0012708595118501346, -0.11418630353099202, -0.04465977453659445, 0.03598295393369421, 0.2143275480097188, 0.01072307494193897, -0.09377824049885958, 0.15671615860426408, 0.12397425247384403, -0.15399796811555294, 0.14302064631472103, -0.14810660355415342, 0.1443796910282352, -0.11554641069386658, 0.07850842699713079, 0.0701585525412307, 0.04400634925689848, -0.031399938277817556, -0.07103037950315959, 0.08694704210855361, -0.06337148780602286, 0.21584220686775035, -0.006370543448601127, 0.12054023006305202, 0.0013061503924952427, -0.027870969177600985, -0.012936124519612322, -0.06706662382483451, 0.21969437091597302, -0.11520179573516198, -0.04833583049898542, 0.05564215933381329, 0.20701227332729566, -0.04099955346305845, -0.0982225946517749, 0.010461320683040239, 0.10529113451400507, 0.06964002509112996, 0.031099259043987817, 0.2359184690293959, 0.13579441873658157, 0.13576146578585566, 0.18122459283600595, 0.053150015213200674, 0.05806300205877557, 0.09112235132392985, -0.07485024430807256, 0.04071922540638413, 0.10069596693890177, -0.09614317413560429, 0.076007629945582, -0.12055701779345816, 0.06050338802197846, 0.057548645776554434, 0.05245736438337515, -0.13492095140640364, -0.028590311849635133, 0.06765094943126145, 0.08535997409821432, -0.18730720436880574, -0.1425856258848015, -0.2458129761004694, 0.058746448710096, -0.06416120461362879, 0.12116481815263982, -0.04133016939336173, -0.008831785866253534, 0.0952060028549873, 0.055718058765587324, -0.03221806864027914, -0.07752284265216844, 0.12669466369922042, 0.05619553123077793, 0.01967281692492394, -0.011608585410363862, -0.02554511561895155, -0.005607684109139649, -0.10968548307917841, 0.0770636308251376, -0.06255934961881099, -0.08247506636533825, -0.0985956498915529, -0.0871780432918608, 0.14249624553691487, 0.1670491848244083, 0.08601476794331103, -0.09337904075745805, -0.16956090153547024, -0.08347693445103861, -0.02696485875337409, 0.09669246912745827, -0.03487121803546022, 0.001196133366837172, 0.04558966690900731, 0.008915480117765759, 0.01085517665344465, -0.12939959100040196, -0.09844492778978516, -0.0763494121574953, 0.2639811126518779, -0.022187817493225834, 0.06982094286070685, 0.271561876047607, 0.06722646535653125, -0.13917156516381698, -0.05876324131045562, 0.13509454718460154, -0.029194454691252026, 0.013262785177237557, -0.035153868051414454, 0.129784234588626, 0.19972452332224788, -0.08608443564026853, 0.012422377221750795, 0.18404369499937764, -0.03802146902954197, -0.0923035247243465, -0.08991366998965244, -0.24190571872680194, -0.08516712216441247, 0.09379826657471516, -0.060642354293187865, 0.1858240510631241, -0.10008955291079354, 0.055772037555307644, -0.00969324372298394, -0.02578580744306847, -0.02002215717874188, -0.14802027392259975, 0.06493113787660738, 0.09297680323228168, 0.03949582723901729, 0.0020913849117512578, -0.09733786246045562, 0.0030024092742294093, 0.07257980634555398, 0.025358341162898836, -0.08075874878368561, -0.05156089139215497, -0.032340096333018487, 0.03574212274683565, 0.058593773294152274, 0.0038777670028709668, 0.0212331017705638, 0.13107003532449718, -0.031284326590583576, 0.15621989359525754, 0.07359909912817354, -0.1767904266670372, -0.027123308513967055, 0.017354663040582956, 0.04895029083155253, 0.010840706765049328, -0.09785402315451679, 0.06991677954840964, -0.07402115744473232, 0.08138841875645537, -0.02266812331559921, -0.029436694847126688, -0.04388677448778443, 0.06848793537739421, -0.04023205938706342, 0.01760918026810372, 0.007842160927362172, 0.06235591610513433, 0.050710228227836045, -0.0784182048676462, -0.19502292825567874, 0.039687803972899206, 0.016406784092220315, -0.0005116837911430142, -0.06500919484574279, 0.0756027853740771, -0.008428971669192228, -0.010735834738985867, 0.0907754829918166, 0.1556103433880504, -0.10542212378079648, -0.015371465206466366, 0.20353107168428056, -0.017846237422682126, 0.008444727746940559, 0.08097613083103415, 0.09585559115213434, -0.1487560927517586, 0.12873125924251977, -0.07817130043459108, -0.020578053357683878, 0.07791168105407781, 0.09582233676365731, 0.10472059297443986, -0.07204098799310431, 0.12349267556087624, -0.026473122216720563, -0.09725624781425912, -0.009369173663961174, 0.010930475415629685, 0.014883751785807177, -0.011658949766469246, 0.12122136612202712, -0.005083494179386717, -0.30614454142729675, 0.08803973986804682, 0.11045837529626015, -0.13365425324364325, 0.02914113051896865, 0.009105354550377176, 0.027914512208373623, 0.12658569251477422, 0.041695639554164554, -0.07816648102049138, 0.05096216925816787, 0.053690039498599296, 0.003311194864769558, 0.017153748005592766, -0.03530616492435246, 0.14744159603073442, 0.11540424296349827, 0.1606212876389913, 0.07138233717249426, 0.015650302376564836, 0.039806008156842196, 0.010638441640088526, 0.009272308862143096, -0.10785345030015905, 0.18635837582539952, -0.11529324141680497, 0.039770934125255626, -0.09774679982981369, 0.06726876401810526, 0.16722644414653376, 0.07038573287607251, -0.038788934794192216, 0.1291203779356697, -0.029766182214871574, 0.15333049610665728, -0.17125701410788863, -0.037441828266103955, 0.016773573897291557, -0.13883006013468152, 0.08875360662329979, -0.031415889876396784, -0.0015506357921014455, 0.14175113134048392, -0.02441322406257626, -0.03732513640602286, 0.030511968616297454, -0.0591164153973502, 0.11000746697678954, 0.08037624024091745, -0.08215443814537676, 0.03630927245297143, -0.03894840357282725, 0.25752852299512896, 0.16210426022523053, 0.1457654358499403, -0.033101383783644425, -0.01930360555238074, 0.005279852324969925, -0.0534617217257351, -0.02735055824631823, -0.1466097735295088, 0.04073894771588431, 0.054815069679962206, 0.0855047562739204, -0.06961557618383418, 0.05043152636191159, 0.14459747724628627, -0.12440383905038338, 0.03205069155409689, -0.022694168509553796, 0.12303118227939112, -0.16661360537595649, 0.1397684134371858, 0.11180466047675114, -0.07019549079827038, 0.013304832802867358, -0.12873600792811732, 0.13724796002444098, 0.04072450419818613, 0.023351694901241497, 0.16111007875294966, -0.029039074695085015, -0.18162584823646555, -0.14120101961626763, 0.023059020413583264, -0.18907432336594965, -0.1310328624248311, -0.010860389911614927, -0.0666864222689628, 0.009452988880113908, 0.15253010917050086, 0.04193191560923872, -0.08860953584626907, 0.12357449394845813, -0.11500751760654343, 0.04136889674516161, 0.18816949077398135, 0.1070901924618951, -0.030807158289378467, 0.008811269731401497, 0.09743024614277752, -0.025731789497724103, -0.04653325614621856, 0.05239655354793141, 0.023143124766490747, 0.026214870480144627, 0.07905743053600517, -0.08323210829600158, 0.10217796460643128, -0.046084476754467155, -0.10367352605124468, -0.001581331719004689, 0.08183987064451737, 0.10052889414376064, -0.045206975922538445, -0.03771577311714872, 0.11853040238864931, 0.12295001071878367, -0.04958456016137349, -0.009558417008268795, 0.06226700618015207, -0.16228961605406333, 0.24188034890562823, 0.1422966020388758, 0.03322877040066634, 0.012816473129944854, -0.07076759017447024, -0.0347027995140946, 0.1551261088670379, -0.07636562916186401, 0.05690396512808903, -0.06591870091564178, -0.1247043537012099, -0.010583444401195264, 0.14387340900249748, -0.05432472760427595, -0.11375694519169444, -0.10262493612848081, 0.12853551558704365, 0.13116405759160477, 0.09968852615044606, -0.057030071075111224, -0.09037934103542683, -0.04213978716813515, 0.0756274564687537, -0.06437337344310717, -0.03288598423386155, -0.0930757741579673, -0.08588598712114115, 0.0522709565244851, 0.039212601398676356, -0.2367854095033835, -0.08553995974621603, 0.11283502767269966, -0.22815587262522158, -0.09647971394621059, 0.09130421889643912, -0.005244192294847169, 0.07906323518990273, -0.07502551228932948, -0.03834775930748359, -0.0024626559754341846, -0.01412142225259987, -0.10384360641776227, -0.09546075423549343, 0.041397774737609506, 0.029453484580318785, 0.100816257764564, -0.0028308508844319858, -0.025830349482918725, -0.0392738826356904, -0.0870874070553133, -0.06746641946337126, 0.005007875762107218, -0.1219992795180855, 0.08452533031234633, 0.09619481373261171, 0.012903525018716106, 0.0001790579497658882, -0.05681391910711382, 0.07086642609536233, -0.049387564349430285, -0.13378835469049907, -0.11734314165715135, 0.09729948164087392, -0.08007453970441492, -0.18371583926418694, 0.01747220014896819, -0.17716418636101777, 0.025226902165633214, 0.023067348123848225, -0.04474088095849283, 0.08187194287256407, 0.13300067005769942, 0.11766825427499904, -0.22438763264814426, 0.00012996200866667723, -0.08737087763051211, 0.1469837811861493, -0.01527559360171926, 0.054883328522119273, -0.04645511837438597, -0.036217150576430074, -0.16085754415397632, -0.02479156316264371, 0.05776608140848164, -0.06720949657032081, 0.030822872182761377, 0.005150319020354042, -0.2740704323914556, 0.057228163378638466, 0.06999118255862594, -0.14715833923411611, -0.11060400854919172, -0.02016730627193905, -0.032953118418421544, 0.05515751441677868, 0.06662800088752609, -0.0014458415785842916, 0.09943234154746788, -0.11244306997629781, 0.21239809631351175, 0.12502490897727903, -0.05312055067995071, -0.0013817635841388539, 0.08882834881867746, -0.07623696565715773, -0.03430846995514596, 0.13989092453458582, 0.022160425233927316, 0.045791038875390065, -0.12851434017532956, -0.04489916098294182, -0.0918197219382671, 0.05904546484446452, -0.06595069209799795, -0.018445811943174083, -0.06153852813005223, 0.03419111186046905, -0.200484199112455, -0.03872707236293987, 0.02628177798080234, -0.0858331360837703, -0.15981982267054182, -0.0696331904839395, -0.07988318472052702, 0.06396672328194082, -0.0870446645243298, 0.04065103092745062, 0.008412879297890861, -0.028843957325914826, 0.10199577805874388, -0.13358097384206793, 0.1952297012723036, 0.0004977454429884707, -0.05853672930372914, 0.14809937689746427, 0.05376260926197895, 0.033910477745410915, -0.007454047816720742, -0.2073680231787404, -0.09423143070504544, -0.0007888579527042226, 0.12513614589469724, -0.13999759900817987, -0.02412006735695518, -0.06100329787645471, 0.012882629595895033, -0.07685479380239482, 0.16354436120528137, 0.11837430735904098, -0.04068866023672342, 0.08296490529051737, 0.007003861935797103, 0.19646953165010927, 0.012837205716608758, -0.06602182616985873, 0.04991804686916976, 0.07390299142830484, 0.12365539351510679, -0.1092733999062312, 0.14351143961629728, 0.0045756007433930225, -0.12335210203717228, -0.1459903732997004, 0.007684100955087145, 0.0868604768864501, 0.19659030011264012, 0.18752700623630603, -0.01983398726156686, -0.1393283473949717, -0.10911021709325629, 0.05255569969060876, 0.18524753017385615, -0.06074896857103454, -0.15686176954205144, 0.04184377665192574, -0.11190213736475361, -0.13892155136244666, -0.0781896965066607, -0.0839205064912321, -0.16366373122690858, -0.012014190449286446, -0.043962699063510136, -0.056259887276608744, 0.0602006316640062, -0.1136445168224193, -0.016532325230171785, -0.019336369658237536, 0.03558901213509715, -0.31148703723148025, -0.024180582944700425, -0.059626433565317806, -0.04152511775970927, 0.01857572614232243, -0.024548086445957504, 0.16813141673554088, 0.00887828148861329, 0.09932251227230854, 0.01690920078473468, -0.004242624272935975, -0.06639996770889169, 0.12271277915576878, -0.1125739839762102, -0.1264346286417226, 0.08699303643575282, 0.03467788500868298, -0.04247069901483566, 0.05218368844479385, 0.04603835154879135, -0.03381403887925962, -0.019151987012190428, 0.2028997861648251, 0.04200543338273002, -0.06440390543325533, -0.01422742651179709, -0.10174339789832212, -0.02080004820265698, 0.01350470796400222, 0.005728847358699345, -0.1040984127612372, -0.024860345058832174, -0.1659713605695638, -0.08037779368700386, 0.0012248089992320478, -0.02588778038351304, -0.059533407305611866, -0.040595852006986115, -0.02370263930592713, -0.09080067035189791, 0.01745100046212012, -0.1998369417999047, 0.04671586970156575, -0.019385766670794106, 0.17411705236496133, 0.15078960915063389, 0.06054513753800609, -0.09783728556769535, 0.10474435429873252, 0.018630850668848488, -0.07474551526628895, 0.002268209200053385, 0.14063853014008754, -0.034000863222331076, -0.013571365611452555, 0.060290467755682225, -0.08100400637494683, -0.03922751840506888, 0.023265127273670725, 0.043337452827275046, -0.09284266471047196, -0.04349920938092131, -0.11743564536921132, -0.08235165625702201, -0.12690847091481872, 0.005536943264290516, -0.17418908373758374, -0.04868570722765197, -0.03376121087859759, -0.14930031127824936, -0.02869708612830394, -0.10144609640473574, 0.04277677990967943, 0.016278080593876573, -0.0032047196446941687, -0.04199525382176103, -0.14391325197473348, -0.025362400833994533, -0.006575914130033136, 0.10223604923771877, -0.010461515881122103, -0.01482075354362466, -0.07788734517876517, -0.023307046840082814, -0.030349596085815497, -0.12441539350343343, 0.024965511252967296, -0.06178451672434232, -0.0190026562495328, 0.07337543903670192, -0.07341435444445359, 0.09185306530064563, 0.17571880771480677, 0.042395267082272335, 0.10277013778913797, -0.1351700395858065, 0.0056633772533622685, 0.04931370577193584, -0.03286625821845971, -0.14293044459083898, -0.007689829561107378, -0.04573154042316485, 0.0750280090811192, 0.05156700993870394, -0.1016517726484242, -0.054938141084483395, 0.0033769965224701957, 0.0865450218195729, 0.023451814622402874, -0.03726696542910872, 0.052783183573406126, -0.033304082597313954, -0.052351715535702184, -0.028734200377757858, 0.11347002195200145, 0.07473163014365457, 0.06136343069536174, -0.030877472425553644, 0.03849473644738261, 0.13379109372923556, 0.08176274569374842, -0.11165929461973385, 0.032307839330733557, 0.05208207790572773, 0.05046192235417592, -0.07495443342999722, -0.19989124260268448, 0.03574542444105584, 0.16185778456766564, 0.021800049738270235, -0.029178113836578118, 0.07024871420722195, 0.12174851256880433, -0.1045769824943599, -0.03967502768401753, 0.004635079338257407, -0.0010361082697057193, -0.009121472637797171, 0.021939903202510963, -0.04133305201355809, -0.03896818319268959, -0.046623468437876216, -0.10598351092234724, 0.06521081588215534, -0.1628487363253899, 0.007247623195994166, -0.06266651830772225, -0.07175508119876726, -0.195553087946558, -0.03381589123612865, 0.02789400482626594, -0.059443910530300785, -0.00413881071985521, -0.1146735360220297, 0.07013226439819081, 0.07684519606958312, 0.08541801367928009, 0.008762540554903478, -0.0017296209188297292, 0.056109587500651176, 0.10475450671911442, -0.05271405048122612, -0.07559821460831218, 0.2384276647049212, 0.07077425268368952, 0.08515160525878274, -0.07684522659537535, -0.07272580358196691, -0.036742730796835696, 0.14366392630388777, -0.13542214571450048, 0.06908430830421812, 0.1089516915665356, 0.05594442753495752, -0.0016004801905105033, 0.09637420435169491, -0.1611316240951449, -0.11825867839793938, -0.06063670469001384, -0.21964943784592883, -0.039022200102604175, 0.046876746597918184, 0.05091641620790838, 0.1254747980330954, -0.07363788334176578, 0.11165999348232876, 0.018220796783403142, 0.02628601348749773, 0.11741390424410401, 0.01596457904975087, -0.16099901171902142, -0.05770424387233686, 0.1364650478682339, -0.05898367516869721, 0.0017400852775055122, -0.04154431861149849, 0.04730039052763805, -0.06854706866489477, 0.08931308623002672, 0.07226909748401322, 0.048405689709347735, -0.10469745464501211, -0.003916703472116668, -0.13211673183313621, 0.02465207558999631, -0.034457412656214235, 0.040304669901720595, -0.07384653312445086, -0.11239102485095423, 0.014861531938151769, -0.18564707259663693, -0.003938734055138978, 0.1292406326363714, -0.044367030215744716, 0.1478835081208559, 0.11062793959603352, -0.027078643288268197, -0.15776952872682784, -0.007656005792700288, -0.10653973893336488, 0.07497042866493851, -0.06741777735866399, -0.010410073739452692, 0.0347544825769452, 0.11767049152531223, -0.026312240462131632, 0.014831765087053084, 0.06650248171738606, -0.17276488173251228, -0.051487772316475305, -0.08605768149021616, -0.01847786533644653, 0.12186531782059687, -0.13453242724830392, -0.10959945107468672, 0.13016217698355906, 0.0188376051942485, -0.28117002148200926, 0.059834640568479286, -0.03893739124675018, 0.1421055128355785, -0.0022011447629456467, 0.13069837784326774, -0.10168401751867029, 0.045871242646586846, 0.04560792266098512, -0.06397580429782977, 0.1170057232999407, 0.046022626324218496, -0.059056147197457415, -0.1384971298173818, -0.12053797521346524, -0.01145150857703292, -0.022844178069205807, -0.0533631966456667, 0.09058521392771546, 0.06382521423369639, 0.05166078807390702, -0.02446323444236953, 0.07087767551977615, -0.04174521452754304, -0.09862711789838101, -0.10418272721744, 0.11070559831295552, -0.0731591496226102, -0.025942604854835558, -0.10364639155401632, 0.23292156319695387, -0.08492477271801654, 0.012916541893831091, 0.038555225709578644, -0.05456582012347662, -0.06174715217401158, -0.07730777115643897, -0.11184347730495761, -0.064147407416766, -0.06819215994263779, 0.00956167670295533, 0.0002178424496504496, 0.11580391019156322, -0.04562716511873646, 0.09851272901363711, -0.013729199397339024, -0.05254679334877004, -0.02099051412040522, -0.0906196999930883, 0.036526044808754064, 0.02985787444536327, 0.07783113771318076,-0.12034857452149242, 0.020732736474808035, 0.02327784279812781, 0.05338548168865449, 0.07696129670482571, 0.12481794103833375, -0.04779621413499845, -0.05832186053227152, -0.03404086420374577, -0.08488531114929333, -0.10217516851960123, 0.13354097953206387, 0.17436106765678583, 0.0794194226387443, 0.02240695465505178, 0.0535817642788201, 0.047992187986575285, -0.1841811497346597, -0.08186088517322836, -0.11740458210279658, -0.13358972534009686, 0.012228290140185987, 0.019273856412738984, 0.07862960295371559, 0.09891218532583258, 0.07870771312850593, -0.08261797039152985, 0.06227595441204702, 0.012819764315842905, -0.0456000275270586, 0.09579637609671987, -0.10081764635065145, 0.16823659363853002, 0.19660292165787308, -0.14191676729273103, 0.15544203527799316, -0.2107211246666798, -0.1571964570234902, 0.08891813060607694, -0.045468855695038675, -0.09224163469789454, 0.142908412370904, -0.12073836807477055, 0.09596635085887147, 0.0304071774905173, 0.13042612708932622, 0.09429114763800878, 0.02728154948979813, 0.20091413322883123, -0.16206071918563708, -0.05279155340069627, 0.08644972533660293, -0.008424146508451653, 0.1767116446510164, 0.1719075420581853, 0.08429312734086655, -0.0045748449911429245, 0.06927721864069357, 0.15252918469049442, -0.1577549713983645, 0.061836032362307974, 0.13111800634450135, -0.0435285848029798, -0.10226955062589632, -0.2271255250449863, -0.12254660609243753, 0.1578080517609815, 0.019804958944604874, -0.10447259651644457, -0.007478104794618643, 0.013132928999873046, 0.07609066115122627, -0.06601627444730529, 0.172480618012279, 0.14268169930085547, 0.11144944992052604, 0.060314738513777215, -0.06650145083475634, 0.13738847655557623, -0.12473572680396067, -0.10738654690169776, -0.03187293310752065, 0.007366923302874944, 0.1394559079420605, 0.004380667936797265, 0.1567577727828195, -0.2028830605584645, -0.0427775933624151, -0.12390300108054703, 0.018686906289569382, 0.07624097279857311, 0.11008802900046828, 0.024818495380874116, 0.10233326655428453, 0.10324463254404548, -0.018593171899962967, -0.005901207642464944, -0.03269636702623022, 0.058210509274311775, -0.0465023814739166, 0.09463294024545205, -0.028976846521629813, 0.07481387368115794, 0.03358617917275042, -0.06955077972391967, -0.004852480924460503, -0.06936232734154209, 0.04981322321500451, -0.0320190595345559, -0.17669411616482167, 0.14392873969553052, -0.051330555003465395, -0.050224452034837955, 0.0617296839572071, 0.025255282120150147, -0.004712809221522036, -0.021863982773494467, -0.05717994653264722, 0.14032662074785981, -0.0862022857315431, 0.016386019691266084, -0.03434685524117449, 0.06429450198985298, -0.015489645932767665, 0.06320637778179132, -0.22889471338405604, 0.13885767326583737, -0.21880218117135028, 0.054637651108444554, 0.04241864000469303, -0.1444802568686759, 0.03319921232985265, -0.20058962232454647, -0.2032758811073462, 0.2772031478618611, -0.12789998624896506, -0.03236438671310689, -0.031785545170413355, -0.003168255352342732, 0.034079321843438384, 0.115368451332095, 0.09403873700283488, -0.008577550246393947, 0.009034450977364153, -0.10274656163617335, -0.014504640496768749, 0.1303971116265896, 0.17398253567479555, -0.10608568614653047, -0.012913393123789627, 0.04585996263997258, -0.007528943888236272, -0.10551133350777, 0.08041381804053474, -0.08347990876838296, -0.014149501951265976, -0.026992969759007637, -0.003798443946856791, -0.10440612336863545, -0.1381989362392563, 0.04447308347328874, -0.04629098968001702, 0.19545595732460458, -0.19175214026685816, 0.026410680691431078, 0.008152552715820714, -0.02364628879742166, -0.0488908244540425, 0.10300926309931656, 0.11990894019227592, -0.06046031982070413, -0.05946363356150361, -0.05845516507047153, 0.015942586657456764, 0.08037663862140679, -0.04075251164254082, -0.03010938446037, -0.06300280791215356, -0.015377534812747388, -0.10038820004838733, -0.08620175024890074, 0.08318970216940598, 0.010824054797151102, -0.09537174747582278, -0.009041554531469523, 0.1300614439941228, -0.22775333336535222, 0.09363841459345612, -0.05436898348208113, -0.016224051738554266,-0.0028417526204362973, -0.03759210366280352, -0.011945982865298948, -0.013528743863790278, -0.0015858668662253616, 0.10974118766198707, 0.277233098431886, -0.011882375011472402, 0.09079828452037755, 0.17394093250351997, -0.004931195557534062, -0.23451694803616496, 0.027554529289125426, 0.10867607856526088, -0.029786083129067033, -0.06598616306447345, -0.21779093155326532, 0.08371909035775622, -0.04367586483375708, -0.024242014052241644, 0.19768556602091492, 0.05586530083717235, -0.04602546298834792, -0.18127461043414134, -0.027631024458771025, 0.07582754239966702, -0.10455895463939316, -0.07244077323116138, -0.051351175745190186, -0.07983481491676696, -0.25664779350795086, -0.11238870323627906, -0.05308564645637869, 0.009635813956251824, -0.10125124472210692, -0.031369911187747936, 0.009564243092582895, -0.016070117017065327, -0.1060224475105428, -0.02892495367511984, -0.06024628532844422, 0.03150393810790792, 0.07795722638007688, 0.11477960187608077, 0.02603170572744707, -0.16891517593306601, 0.1673343640400204, 0.08113271505740148, -0.013723193391281616, 0.05796810165560928, -0.07101598372518551, -0.042884249449551964, 0.18138215884932, -0.22537245851521434, 0.021545269060031687, -0.05863057255088288, 0.17053259716779387, -0.18911983312855604, -0.06670426278801461, 0.12222251828538047, -0.06017988842447303, -0.025623328360635862, 0.14254744811785766, 0.1051246513857457, -0.18426077339535263, 0.024041194821679126, 0.04612093371499631, 0.12339276168892088, -0.12306729404297659, 0.09548291442222563, -0.09862238188122492, -0.08385282337499657, -0.10462684042479815, 0.00246739304179382, -0.12469485432082715, 0.09206426046436238, -0.06286406848379844, -0.08355550238925782, 0.09172181917735633, -0.054061830735334784, 0.010347426762039903, 0.06917626792659391, -0.09288598270687982, -0.08077962542759351, -0.029733021137238382, 0.026769418775824755, 0.2230462173820946, 0.1325231978353731, 0.060969884052092506, -0.12502178965819052, -0.07587624989221438, -0.021582943638729115, 0.1811008535335189, -0.03792757544152195, -0.12028487446217358, 0.08065149467784379, -0.034506500248718534, -0.02954292069616329, -0.20751031871108194, -0.012602343427712624, -0.0003999093130337958, -0.041512926008777824, -0.08831113860702039, 0.007557073897487482, 0.026299758079744363, 0.09549757781877038, 0.2426921474906239, -0.13883391365037093, -0.0018660120674247234, 0.019715900210051415, -0.13552512950900855, -0.17293289652350124, 0.1849559894752024, -0.10854827821117036, -0.23635152182182445, -0.0014459638113126152, -0.06114097713329539, 0.01758962731565262, 0.11062435880994513, -0.24656427696393501, 0.09088977436751344, -0.09133875170319969, 0.03366516143358551, 0.028965316235255, -0.01145013857255899, -0.06932157020043493, -0.034548664964825886, 0.09078491725598409, -0.13236679484832578, -0.04067675919794067, 0.03009890307373412, 0.03811964662777981, 0.051953808052410705, -0.10482279425348325, -0.13072693731280569, 0.0742858123695818, 0.01680585048830981, -0.009895565302690115, 0.09327123170527488, 0.09479011454826482, 0.028547767994041046, 0.06364196519842436, -0.012187975838738194, -0.006049754262180336, -0.0884678227167468, 0.1267956579362305, 0.2088817501125449, 0.07269189581784358, -0.022822079834286715, -0.03446753506517717, -0.08753185717194006, 0.10651669230678161, 0.09233962843227961, -0.0409662796073434, -0.172775474860555, 0.047610747471153674]


def cconv(x, y):
    return fft.ifft(fft.fft(x) * fft.fft(y))


def ccorr(x, y):
    return fft.ifft(fft.fft(x) * fft.fft(y).conj())


def bitfield(n):
    return [int(digit) for digit in bin(n)[2:]]


def buildUserData(data, codelength):
    data = data
    data = np.array(bitfield(data))
    data_len = len(data)
    #print('data before repeat: ', data)
    data = np.repeat(data, codelength)
    #print('data after repeat: ', data)
    return (data, data_len)


def spreadUserData(data, data_len, goldCode):
    data_code = []
    for i in range(data_len):
        data_code = np.append(data_code, goldCode)

    data_spread = np.logical_xor(data_code, data).astype(int)
    return (data_code, data_spread)


def spreadUserDataWithCarrier(data, data_len, goldCode, fc, fs):
    data_code = []
    for i in range(data_len):
        data_code = np.append(data_code, goldCode)

    data_spread = np.logical_xor(data_code, data).astype(int)
    # data_spread = applyCarrier(data_spread * 2 - 1, fc, fs)
    data_spread = applyCarrier(data_spread, fc, fs)
    return data_code, data_spread


def spreadUserDataWithCarrierBitWise(data, data_len, goldCode, fc, fs):
    #print('code in spreading : ', goldCode)
    data_code = []
    for i in range(data_len):
        data_code = np.append(data_code, goldCode)

    # data_spread = np.logical_xor(data_code, data).astype(int)
    data_spread = (data * 2 - 1) * (data_code * -2.0 + 1)
    # test with ook (direct multiplication with goldCode)

    # data_spread = applyCarrier(data_spread * 2 - 1, fc, fs)

    #bipolarSpreadData = data_spread * 2 - 1
    bipolarSpreadData = data_spread
    global sumSpreadData
    global printCounter
    printCounter = printCounter + 1
    sumSpreadData = sumSpreadData + bipolarSpreadData
    # print('d: ', printCounter, list(bipolarSpreadData))
    data_spread = applyCarrieBitWise(bipolarSpreadData, fc, fs)
    # data_spread = applyCarrieBitWise(data_spread * 2 - 1, fc, fs)
    # data_spread = applyCarrieBitWise(data_spread, fc, fs)
    return data_code, data_spread


def despread(composite, code, codelength):
    l = int(len(composite) / codelength)
    despread = composite * (code * -2.0 + 1)
    # print(getBitsForDspread(despread))
    recovered = []
    for i in range(l):
        # recovered = np.append(recovered, 1.0 * sum(despread[i * codelength:i * codelength + codelength]) / codelength)
        recovered = np.append(recovered, getDspreadBit(
            1.0 * sum(despread[i * codelength:i * codelength + codelength]) / codelength))
    # recovered = np.repeat(recovered, codelength)
    return recovered


def despreadWithCarrier(composite, code, codelength, fc, fs):
    l = int(len(composite) / codelength)
    despread = applyCarrier(composite, fc, fs)
    despread = despread * (code * -2.0 + 1)
    # despread = despread * (code)
    recovered = []
    for i in range(l):
        recovered = np.append(recovered, 1.0 * sum(despread[i * codelength:i * codelength + codelength]) / codelength)
    recovered = np.repeat(recovered, codelength)
    # recovered = applyCarrier(recovered)
    return recovered


def applyCarrier(data, fc, fs):
    N = fftSize  # Number of symbols to be sent.
    Fc = fc  # Carrier frequency.
    Fs = fs  # Sampling frequency.
    tStep = 1 / Fs  # Width of each symbol (in sec).

    t = np.linspace(0, (N - 1) * tStep, N)
    carrier = np.cos(2 * np.pi * Fc * t)
    modData = np.multiply(data, carrier)
    return modData


def applyCarrieBitWise(data, fc, fs):
    bitWiseCarrier = []
    # N = len(data)  # Number of symbols to be sent.
    # N = fftSize  # Number of symbols to be sent.
    N = fftSize  # Number of symbols to be sent.
    Fc = fc  # Carrier frequency.
    Fs = fs  # Sampling frequency.
    tStep = 1 / Fs  # Width of each symbol (in sec).

    t = np.linspace(0, (N - 1) * tStep, N)
    # arrier = 2 * np.cos(2 * np.pi * Fc * t)
    carrier = np.cos(2 * np.pi * Fc * t)
    # print(list(np.multiply(-1, carrier)))
    # print(list(np.multiply(1, carrier)))
    global isNoiseAdded
    for i in range(len(data)):
        # modData = np.multiply(data[i], carrier)
        # if isNoiseAdded == False:
        #     modData = np.multiply(data[i] + noise[i], carrier)
        # else:
        #     modData = np.multiply(data[i], carrier)
        modData = np.multiply(data[i], carrier)
        #plotBitWiseCarrier(modData, t)
        # noise will add across only one time (not with every node)
        bitWiseCarrier.append(modData)
    isNoiseAdded = True
    return bitWiseCarrier


def buildCompositeSignal(signals, fc):
    compositeSignal = []
    for i in range(fftSize):
        sum = 0
        for signal in signals:
            #print(signal[i])
            sum = sum + signal[i]
        # compositeSignal.append(sum)

        # if np.all(sum == 0):
        #     compositeSignal.append((sum, fc))
        # else:
        #     compositeSignal.append(sum)
        sum = sum + noise
        compositeSignal.append((sum, fc))

    return compositeSignal


def applyfft(signal):
    # Fs = fs
    # N = fftSize
    N = 64
    # fStep = Fs / N
    # fStep = 400000
    # tStep = 1 / Fs
    # f = np.linspace(0, (N - 1) * fStep, N)
    # X = np.fft.fft(signal, N)
    if type(signal) is tuple:
        signalForFFT = signal[0]
    else:
        signalForFFT = signal
    X = np.fft.fft(signalForFFT, N)
    Xphase = np.angle(X)
    Xmag = np.abs(X) / N

    # fRealized = f[0: int(N / 2 + 1)]
    # fRealized = f
    XmagRealized = 2 * Xmag[0: int(N / 2 + 1)]
    XmagRealized[0] = Xmag[0] / 2
    magnitude = np.amax(XmagRealized)
    magnitudeIndex = np.argmax(XmagRealized)
    phase = Xphase[magnitudeIndex]
    # frequency = fRealized[int(magnitudeIndex)]
    frequency = signal[1]



    # plt.plot(fRealized, XmagRealized)
    # plt.show()

    # if type(signal) is tuple and frequency == 0:
    #     frequency = getFrequencyMapping(signal[1])
    # if frequency == 540800000:
    #     print('phase:', phase)

    magnitude = threshold(magnitude)
    magnitude = assignSign(phase, magnitude)

    return frequency, magnitude, phase



def applyfftModified(signal, fs):
    Fs = fs
    N = fftSize
    fStep = Fs / N
    tStep = 1 / Fs
    f = np.linspace(0, (N - 1) * fStep, N)
    # X = np.fft.fft(signal, N)
    if type(signal) is tuple:
        signalForFFT = signal[0]
    else:
        signalForFFT = signal
    X = np.fft.fft(signalForFFT, N)
    Xphase = np.angle(X)
    Xmag = np.abs(X) / N

    fRealized = f[0: int(N / 2 + 1)]
    XmagRealized = 2 * Xmag[0: int(N / 2 + 1)]
    XmagRealized[0] = Xmag[0] / 2
    magnitude = np.amax(XmagRealized)
    magnitudeIndex = np.argmax(XmagRealized)
    phase = Xphase[magnitudeIndex]
    frequency = fRealized[int(magnitudeIndex)]

    # plt.plot(fRealized, XmagRealized)
    # plt.show()

    if type(signal) is tuple and frequency == 0:
        frequency = getFrequencyMapping(signal[1])

    magnitude = threshold(magnitude)
    magnitude = assignSign(phase, magnitude)

    return frequency, magnitude, phase

# node1 = 1, 1,1
# node2 = 1, 1, 1
# node3 = 1, 1, 1
#
# 3, 3, 3
#
#  fft([3 3 3])  10    11 12 13


def continuousFFT(signals):
    fftBinWithMag = {}
    fftBinWithPhase = {}
    for signal in signals:
        frequency, magnitude, phase = applyfft(signal)
        magnitudes = fftBinWithMag.get(frequency)
        phases = fftBinWithPhase.get(frequency)

        if magnitudes is None:
            magnitudes = [magnitude]
        else:
            magnitudes.append(magnitude)

        if phases is None:
            phases = [phase]
        else:
            phases.append(phase)

        fftBinWithMag[frequency] = magnitudes
        fftBinWithPhase[frequency] = phases

    return fftBinWithMag, fftBinWithPhase

def continuousFFTModiFied(signals, fsList):
    fftBinWithMag = {}
    fftBinWithPhase = {}
    for signal in signals:
        # frequency, magnitude, phase = applyfft(signal)
        frequency, magnitude, phase = applyfftModified(signal, fsList)
        magnitudes = fftBinWithMag.get(frequency)
        phases = fftBinWithPhase.get(frequency)

        if magnitudes is None:
            magnitudes = [magnitude]
        else:
            magnitudes.append(magnitude)

        if phases is None:
            phases = [phase]
        else:
            phases.append(phase)

        fftBinWithMag[frequency] = magnitudes
        fftBinWithPhase[frequency] = phases

    return fftBinWithMag, fftBinWithPhase


# def getAccuracy(sentData, reveivedData, threshold):
#     sentData = sentData * 2 - 1
#     success = 0
#     fail = 0
#     for s, r in zip(sentData, reveivedData):
#         # r = 1 if abs(r) > 1 else abs(r)
#         # accuracy = abs(abs(s) - abs(r))
#         if (abs(r) >= threshold):
#             success = success + 1
#         else:
#             # print('s: ', s, ' r:', r)
#             fail = fail + 1
#
#     # print('fail: ', fail)
#     # print('success: ', success)
#     return success / len(sentData) * 100

def threshold(mag):
    # print(mag, ':', end =" ")
    retMag = 0
    # if mag == 0:
    #     retMag = retMag
    # elif 1.5 < mag < 2.5:
    #     retMag = 1
    # elif 2.5 < mag < 4.5:
    #     retMag = 2
    # elif 4.9 < mag < 6.5:
    #     retMag = 3
    # elif 6.5 < mag < 8.2:
    #     retMag = 4
    # elif 8.21 < mag < 10.5:
    #     retMag = 5
    # elif 10.5 < mag < 12.5:
    #     retMag = 6
    # elif 13.5 < mag < 14.5:
    #     retMag = 7
    # elif 14.5 < mag < 16.5:
    #     retMag = 8
    # elif 16.5 < mag < 18.5:
    #     retMag = 9

    # if mag == 0:

    # if 0 <= mag <= 0.2461:
    #     retMag = retMag
    # # have done this to determine what to do if with the value if it is greater than 0.2461
    # elif 0.2461 < mag <= 1.1722:
    #     retMag = 1
    # elif 1.1722 < mag <= 2.1752:
    #     retMag = 2
    # elif 2.1752 < mag <= 3.1689:
    #     retMag = 3
    # elif 3.1689 < mag <= 4.1616:
    #     retMag = 4
    # elif 4.1616 < mag <= 5.1532:
    #     retMag = 5
    # elif 5.1532 < mag <= 6.1645:
    #     retMag = 6
    # elif 6.1645 < mag <= 7.1837:
    #     retMag = 7
    # elif 7.1837 < mag <= 8.1491:
    #     retMag = 8
    # elif 8.1491 < mag <= 9.1693:
    #     retMag = 9

    if 0 <= mag <= 0.4203:
        retMag = retMag
    elif 0.4203 < mag <= 2.3708:
        retMag = 1
    elif 2.3708 < mag <= 4.3654:
        retMag = 2
    elif 4.3654 < mag <= 6.3396:
        retMag = 3
    elif 6.3396 < mag <= 8.3670:
        retMag = 4
    elif 8.3670 < mag <= 10.3805:
        retMag = 5
    elif 10.3805 < mag <= 12.3811:
        retMag = 6
    elif 12.3811 < mag <= 14.3919:
        retMag = 7
    elif 14.3919 < mag <= 16.3593:
        retMag = 8
    elif 16.3593 < mag < 18.3504:
        retMag = 9

    # print(retMag, ' ', end =" ")
    return retMag


def assignSign(phase, mag):
    if mag == 0:
        return mag
    elif phase == 1.0468607103122654 or phase == -1.0462625533981194 or round(phase, 2) == -1.05 or round(phase,
                                                                                                          2) == 1.05 \
            or phase == 2.6505698219095076e-11 or round(phase) == 0 or phase == 0 or float(
        "{:.2f}".format(phase)) == 1.04 or float("{:.2f}".format(phase)) == -1.04 or float("{:.2f}".format(phase)) == -1.21\
            or float("{:.2f}".format(phase)) == -0.98\
            or float("{:.2f}".format(phase)) == -1.13 or round(phase, 1) == -0.9:
        return mag
    elif phase == -2.094731943277528 or phase == 2.0953301001916738 or round(phase, 2) == -2.1 or round(phase, 2) == 2.1 \
            or phase == -3.1415926535632877 or float("{:.2f}".format(phase)) == -2.09 or float(
        "{:.2f}".format(phase)) == 2.09 or float("{:.2f}".format(phase)) == -3.14 or float("{:.2f}".format(phase)) == 3.14 \
            or float("{:.2f}".format(phase)) == 1.93 or float("{:.2f}".format(phase)) == -2.65 or float("{:.2f}".format(phase)) == -2.66\
             or float("{:.2f}".format(phase)) == 2.17 or float("{:.2f}".format(phase)) == 2.01 or round(phase, 1) == 2.2:
        return -mag
    else:
        print(mag, phase)
        return mag


def getBitsAfterDspread(data):
    bits = []
    for bit in data:
        # if bit <= 0:
        #     bits.append(0)
        # else:
        #     bits.append(1)
        bits.append(getDspreadBit(bit))
    return bits


def getBitsForDspread(data):
    bits = []
    for bit in data:
        if bit < 0:
            bits.append(0)
        else:
            bits.append(1)
    return bits


def getDspreadBit(dataBit):
    if dataBit <= 0:
        return 0
    else:
        return 1


def getAccuracy(inputData, recoveredData):
    print("input data:    ", list(inputData))
    print("received data: ", list(recoveredData))
    errorBitCount = 0
    for i in range(len(inputData)):
        if inputData[i] != recoveredData[i]:
            errorBitCount = errorBitCount + 1

    # print("errorBitCount: ", errorBitCount)
    global totalErrorBitCount
    totalErrorBitCount = totalErrorBitCount + errorBitCount
    accuracy = 100 - ((errorBitCount / len(inputData)) * 100)
    return int(accuracy)


def getBitErrorRate(inputData, recoveredData):
    errorBitCount = 0
    for i in range(len(inputData)):
        if inputData[i] != recoveredData[i]:
            errorBitCount = errorBitCount + 1

    bitErrorRate = errorBitCount / len(inputData) * 100


def packetError(inputData, recoveredData):
    numberOfErrorBitPer7 = 0
    codelength = 7
    i = codelength
    bitError = 0
    packetError = 0

    while i <= len(inputData):
        for j in range(codelength):
            index = i - codelength + j
            if inputData[index] != recoveredData[index]:
                numberOfErrorBitPer7 = numberOfErrorBitPer7 + 1
        if numberOfErrorBitPer7 >= 4:
            bitError = bitError + 1
        i = i + codelength
    # print("bitError: ", bitError)
    global packetErrorCount
    if bitError > 0:
        packetErrorCount = packetErrorCount + 1
        packetError = 1
    return packetError


def getFrequencyMapping(fc):
    f = 0
    if fc == fc1:
        f = 2199107.1428571427
    elif fc == fc2:
        f = 2000892.857142857
    elif fc == fc:
        f = 1800000.0

    return f

def getFrequencyMappingModified(fc, frequencies):
    startFrequency = 540000000
    bandWidth = 400000
    firstCarrierFrequency = startFrequency + bandWidth
    a = int(str(firstCarrierFrequency)[3:])
    b = int(str(fc)[3:])

    res = b/a
    resCeil = math.ceil(res)
    diff = resCeil - res
    frequencyIndex = 0
    if diff > 0.5:
        frequencyIndex = (resCeil - 1) - 1
    else:
        frequencyIndex = (resCeil) - 1

    # return getCarrierFrequencyList(numberOfCarriersUtil)[frequencyIndex]
    return frequencies[frequencyIndex]








def writeDataInfile(data, fileName):
    fileName = fileName + '.txt'
    outfile = open(fileName, "a")

    # outfile.write(','.join(dataDic[index]))
    # outfile.write(str(dataDic[index]))
    # outfile.writelines(str(data))
    outfile.write(str(data))
    outfile.write(" ")


def getMaximumAccuracy():
    accuracy = []
    outfile = open('accuracy.txt', "r")
    Lines = outfile.readlines()
    for line in Lines:
        if line != "\n":
            accuracy.append(float(line))

    # print(accuracy)
    return np.amax(accuracy)


def getMinimumBER():
    ber = []
    outfile = open('bitErrorRate.txt', "r")
    Lines = outfile.readlines()
    for line in Lines:
        if line != "\n":
            ber.append(float(line))

    # print(accuracy)
    return np.amin(ber)


def getBinary40byteDataList(numberOfNodes):
    #howManyData = 9
    howManyData = numberOfNodes
    dataList = []
    # dataList.append(buildUserData(hex0, 7)[0])
    # dataList.append(buildUserData(hex1, 7)[0])
    # dataList.append(buildUserData(hex2, 7)[0])
    # dataList.append(buildUserData(hex3, 7)[0])
    # dataList.append(buildUserData(hex4, 7)[0])
    # dataList.append(buildUserData(hex5, 7)[0])
    # dataList.append(buildUserData(hex6, 7)[0])
    # dataList.append(buildUserData(hex7, 7)[0])
    # dataList.append(buildUserData(hex8, 7)[0])

    for i in range(howManyData):
        dataList.append(generateRandomBinaryNumber(320))

    return dataList


def generateRandomBinaryNumber(size):
    binaryNumber = []
    for i in range(size):
        bin = random.randint(0, 1)
        binaryNumber.append(bin)

    return binaryNumber

def buildSpreadDataForASubcarrier(dataList, codeList, carrierFrequency, fs):
    spreadedDataList = []
    #print('code: ', codeList[0])
    for i in range(len(dataList)):
        #print('data before repeat', i, ' ', dataList[i])
        repeatData = np.repeat(dataList[i], len(codeList[i]))
        #print('data after repeat', i, ' ', list(repeatData))
        spreadData = spreadUserDataWithCarrierBitWise(repeatData, len(dataList[i]), codeList[i], carrierFrequency, fs)[1]
        spreadedDataList.append(spreadData)

    return spreadedDataList


def getCarrierFrequencyList(numberOfCarriers):
    global numberOfCarriersUtil
    numberOfCarriersUtil = numberOfCarriers
    carrierFrequencyList = []

    startFrequency = 540000000
    bandWidth = 400000

    for i in range(numberOfCarriers):
        frequency = startFrequency + bandWidth * (i+1)
        # frequency = startFrequency + 10000000 * (i + 1) + bandWidth * (i + 1)
        carrierFrequencyList.append(frequency)

    return carrierFrequencyList

def getSamplingFrequencyList(carrierFrequencyList):
    samplingFrequencyList = []
    for i in range(len(carrierFrequencyList)):
        samplingFrequencyList.append((carrierFrequencyList[i]/2 + 1))

    return samplingFrequencyList


def getDataCode(goldCode, dataLen):
    data_code = []
    for i in range(dataLen):
        data_code = np.append(data_code, goldCode)
    return data_code

def plotBitWiseCarrier(signal, t):
    plt.plot(t, signal)
    plt.show()


def conversionOfCompositeSignal(compositeSignal):
    print("Composite Signal Before Conversion: ", list(compositeSignal))
    convertedSignal = []
    for digit in compositeSignal:
        if digit == 0:
            convertedSignal.append(0)
        elif digit < 0:
            convertedSignal.append(-1)
        elif digit > 0:
            convertedSignal.append(1)
    print("Composite Signal After Conversion: ", list(convertedSignal))
    return convertedSignal